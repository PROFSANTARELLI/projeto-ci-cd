Exercício: Testes com Pytest e CI com GitHub Actions
Este exercício tem como objetivo apresentar um exemplo simples de uso do framework Pytest para testes unitários em Python e a configuração de um pipeline de integração contínua (CI) utilizando GitHub Actions.
Exemplo 1: Operações matemáticas simples
1. Crie um arquivo chamado `math_utils.py` com as seguintes funções:

def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

2. Crie um arquivo `test_math_utils.py` com os testes:

from math_utils import add, subtract

def test_add():
    assert add(2, 3) == 5

def test_subtract():
    assert subtract(5, 2) == 3

Exemplo 2: Multiplicação com verificação de tipo
1. Altere `math_utils.py` para adicionar a função:

def multiply(a, b):
    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
        raise ValueError("Both arguments must be numbers")
    return a * b

2. Adicione o teste correspondente em `test_math_utils.py`:

def test_multiply():
    assert multiply(4, 3) == 12

def test_multiply_invalid_type():
    try:
        multiply("a", 3)
    except ValueError:
        assert True

Configuração do GitHub Actions
Crie o arquivo `.github/workflows/python-app.yml` com o seguinte conteúdo:

name: Python application

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
    - name: Run tests
      run: |
        pytest

Com isso, ao realizar um push para o repositório, os testes serão executados automaticamente pelo GitHub Actions.
